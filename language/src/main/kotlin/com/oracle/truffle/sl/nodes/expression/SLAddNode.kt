/*
 * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.truffle.sl.nodes.expression

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary
import com.oracle.truffle.api.dsl.Fallback
import com.oracle.truffle.api.dsl.ImplicitCast
import com.oracle.truffle.api.dsl.Specialization
import com.oracle.truffle.api.nodes.NodeInfo
import com.oracle.truffle.sl.SLException
import com.oracle.truffle.sl.nodes.SLBinaryNode
import com.oracle.truffle.sl.nodes.SLTypes
import com.oracle.truffle.sl.runtime.SLBigNumber

/**
 * SL node that performs the "+" operation, which performs addition on arbitrary precision numbers,
 * as well as String concatenation if one of the operands is a String.
 *
 *
 * Type specialization on the input values is essential for the performance. This is achieved via
 * node rewriting: specialized subclasses handle just a single type, so that the generic node that
 * can handle all types is used only in cases where different types were encountered. The subclasses
 * are automatically generated by the Truffle DSL. In addition, a [factory class][SLAddNodeGen]
 * is generated that provides, e.g., [node creation][SLAddNodeGen.create].
 */
@NodeInfo(shortName = "+")
abstract class SLAddNode : SLBinaryNode() {

    /**
     * Specialization for primitive `long` values. This is the fast path of the
     * arbitrary-precision arithmetic. We need to check for overflows of the addition, and switch to
     * the [slow path][.add]. Therefore, we use an
     * [addition method that throws an exception on overflow][Math.addExact]. The
     * `rewriteOn` attribute on the [Specialization] annotation automatically triggers
     * the node rewriting on the exception.
     *
     *
     * In compiled code, [addExact][Math.addExact] is compiled to efficient machine
     * code that uses the processor's overflow flag. Therefore, this method is compiled to only two
     * machine code instructions on the fast path.
     *
     *
     * This specialization is automatically selected by the Truffle DSL if both the left and right
     * operand are `long` values.
     */
    @Specialization(rewriteOn = arrayOf(ArithmeticException::class))
    protected fun add(left: Long, right: Long): Long {
        return Math.addExact(left, right)
    }

    /**
     * This is the slow path of the arbitrary-precision arithmetic. The [SLBigNumber] type of
     * Java is doing everything we need.
     *
     *
     * This specialization is automatically selected by the Truffle DSL if both the left and right
     * operand are [SLBigNumber] values. Because the type system defines an
     * [implicit conversion][ImplicitCast] from `long` to [SLBigNumber] in
     * [SLTypes.castBigNumber], this specialization is also taken if the left or the
     * right operand is a `long` value. Because the [long][.add]
     * specialization} has the `rewriteOn` attribute, this specialization is also taken if
     * both input values are `long` values but the primitive addition overflows.
     */
    @Specialization
    @TruffleBoundary
    protected fun add(left: SLBigNumber, right: SLBigNumber): SLBigNumber {
        return SLBigNumber(left.value.add(right.value))
    }

    /**
     * Specialization for String concatenation. The SL specification says that String concatenation
     * works if either the left or the right operand is a String. The non-string operand is
     * converted then automatically converted to a String.
     *
     *
     * To implement these semantics, we tell the Truffle DSL to use a custom guard. The guard
     * function is defined in [this class][.isString], but could also be in any superclass.
     */
    @Specialization(guards = arrayOf("isString(left, right)"))
    @TruffleBoundary
    protected fun add(left: Any, right: Any): String {
        return left.toString() + right.toString()
    }

    /**
     * Guard for String concatenation: returns true if either the left or the right operand is a
     * [String].
     */
    protected fun isString(a: Any, b: Any): Boolean {
        return a is String || b is String
    }

    @Fallback
    protected fun typeError(left: Any, right: Any): Any {
        throw SLException.typeError(this, left, right)
    }
}
